const animateWordElements=()=>{document.querySelectorAll("[data-animate-words]").forEach(t=>{const a=t.querySelectorAll(".word");a.length&&(gsap.set(a,{opacity:0,y:20,duration:.8,ease:"back",stagger:.025,rotation:"5deg"}),new Animate({scrub:!1,start:"top 90%"},{opacity:0,y:20,duration:.8,ease:"back",stagger:.025,rotation:"5deg"},{opacity:1,y:0,duration:.8,ease:"back",stagger:.025,rotation:"0deg"},t,a,!0,!0))})},animateChars=()=>{document.querySelectorAll("[data-animate-chars]").forEach(t=>{const a=t.querySelectorAll(".char");a.length&&(gsap.set(a,{autoAlpha:0,y:20,rotation:5}),setTimeout(()=>{new Animate({scrub:!1,start:"top 80%"},{autoAlpha:0,y:20,rotation:5},{autoAlpha:1,y:0,duration:1,ease:"back",stagger:{amount:.75,from:"left"},rotation:0},t,a,!0,!0)},2500))})},animateLines=()=>{document.querySelectorAll("[data-animate-Lines]").forEach(t=>{const a=t.querySelectorAll('*[class^="line"]');a.forEach(a=>{a.style="overflow-y:clip";const e=a.querySelectorAll(".word");e.length&&(gsap.set(e,{autoAlpha:0,y:100}),setTimeout(()=>{new Animate({scrub:!1,start:"top 85%",end:"top 85%"},{autoAlpha:0,y:100,skewX:"-6"},{autoAlpha:1,y:0,duration:2,ease:"expo.out",skewX:"0",stagger:.03},t,e,!0,!0)},2500))})})},animateCharsFromRight=()=>{const t=document.querySelectorAll("[data-animate-chars-right]");t.length&&t.forEach(t=>{const a=t.querySelectorAll(".char");a.length&&(gsap.set(a,{autoAlpha:0}),new Animate({start:"top 80%",end:"bottom 20%"},{autoAlpha:0,x:60,duration:.8,ease:"back",rotation:5},{autoAlpha:1,x:0,duration:.8,ease:"back",stagger:.025,rotation:0},a[0],a,!0,!0))})},animateCharsFromCenter=()=>{document.querySelectorAll("[data-animate-chars-center]").forEach(t=>{const a=t.querySelectorAll(".char");a.length&&(gsap.set(a,{autoAlpha:0,y:-25,rotation:5}),new Animate({start:"top 80%",end:"bottom 50%"},{autoAlpha:0,y:-25,ease:"back.out(4)",rotation:5},{autoAlpha:1,y:0,duration:1,ease:"back.out(4)",stagger:{amount:.2,from:"center"},rotation:0},t,a,!0,!0))})};document.addEventListener("DOMContentLoaded",()=>{const t=async()=>new Promise(t=>{if("undefined"==typeof splitFinish)return void reject(new Error("splitFinish is not defined."));const a=setInterval(()=>{!0===splitFinish&&!0===finishLoading&&(clearInterval(a),t())},50)}),a=async()=>{await t(),setTimeout(()=>{animateWordElements(),animateChars(),animateCharsFromRight(),animateCharsFromCenter(),animateLines()},1600)};a()});